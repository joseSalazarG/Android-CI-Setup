name: Pruebas de Automatización con almacenamiento externo en Dropbox
on:
  push:
    branches:
      - local-almacenamiento-externo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Realiza el checkout del código fuente
      - name: Checkout Code
        uses: actions/checkout@v4

      # Paso para descargar la APK desde Dropbox, manejando el token de confirmación
      - name: Download APK from Dropbox
        run: |
          FILE_URL="https://www.dropbox.com/scl/fi/nz508iyf0n7gejef5kvcc/appNueva.apk?rlkey=86mphduf10rzsytebebxdcvb5&st=nv8g4h72&dl=1"
          FILE_NAME="app-release.apk"
          wget -O src/test/resources/${FILE_NAME} ${FILE_URL}

      # Verificación del archivo descargado
      - name: Verify APK file
        run: |
          file src/test/resources/app-release.apk
          ls -lh src/test/resources/app-release.apk

      # Configura JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven packages para mejorar la velocidad en ejecuciones posteriores
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Habilita los permisos de grupo KVM para la virtualización
      - name: Enable KVM group permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Instala Appium
      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install uiautomator2

      # Configura el emulador de Android y ejecuta los tests
      - name: Run Android Emulator and Execute Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          profile: pixel_6
          script: |
            mvn test -Dcucumber.filter.tags=@test

      # Comprime los reportes y capturas de pantalla en un archivo ZIP
      - name: Compress report and screenshots into a ZIP file
        run: |
          zip -r reporte-automatizacion.zip "Reporte de Automatizacion 0"

      # Sube el archivo ZIP como un artefacto del workflow
      - name: Upload Test Report ZIP
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: reporte-automatizacion.zip

      # Envía un email con el reporte adjunto
      - name: Send email with report attached
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SECRET_EMAIL }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: Resultados de Automatización
          body: Se adjuntan los resultados de la última ejecución de pruebas.
          from: ${{ secrets.SECRET_EMAIL }}
          to: ${{ secrets.RECIPIENT_EMAIL }}
          ignore_cert: true
          attachments: reporte-automatizacion.zip